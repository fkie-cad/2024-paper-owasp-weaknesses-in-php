{"errors": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "paths": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "results": [{"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.non-literal-header", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/ru/function.header.php", "https://owasp.org/www-community/attacks/HTTP_Response_Splitting"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.eval-use", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Evaluating non-constant commands. This can lead to command injection.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.eval", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.weak-crypto", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-328: Use of Weak Hash"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://www.php.net/manual/en/book.sodium.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.md5-loose-equality", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR", "dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.file-inclusion", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.include.php", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php", "https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion"], "subcategory": ["audit"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-sql-string", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.echoed-request", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.htmlentities.php", "https://www.php.net/manual/ru/reserved.variables.request.php", "https://www.php.net/manual/ru/reserved.variables.post.php", "https://www.php.net/manual/ru/reserved.variables.get.php", "https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "ERROR"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-filename", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-filename", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-filename", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}, {"check_id": "php.lang.security.injection.tainted-filename", "end": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "extra": {"dataflow_trace": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "engine_kind": "OSS", "fingerprint": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "is_ignored": false, "lines": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "subcategory": ["vuln"], "technology": ["php"]}, "metavars": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "severity": "WARNING"}, "path": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS", "start": "BLINDED_DUE_TO_ETHICAL_CONSIDERATIONS"}], "version": "1.22.0"}